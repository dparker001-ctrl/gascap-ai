generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  accounts  Account[]
  sessions  Session[]
  vehicles  Vehicle[]
  stations  Station[]
  prices    Price[]
  fills     FillCalc[]
}

model Vehicle {
  id           String  @id @default(cuid())
  user         User    @relation(fields: [userId], references: [id])
  userId       String
  name         String
  tankCapacity Float
  fuelType     String? // 87, 89, 91 etc.
  createdAt    DateTime @default(now())
}

model Station {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  name      String
  address   String?
  lat       Float?
  lng       Float?
  createdAt DateTime @default(now())
  prices    Price[]
}

model Price {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  station         Station? @relation(fields: [stationId], references: [id])
  stationId       String?
  centsPerGallon  Int
  recordedAt      DateTime @default(now())
}

model FillCalc {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  vehicle         Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId       String?
  station         Station? @relation(fields: [stationId], references: [id])
  stationId       String?
  mode            String   // "target" | "budget"
  targetLevel     Float?   // 0..1 when mode=target
  budgetCents     Int?     // when mode=budget
  resultGallons   Float
  resultCostCents Int
  taxesPct        Float?   // e.g., 7.5
  createdAt       DateTime @default(now())
}

/*** NextAuth Models ***/
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
